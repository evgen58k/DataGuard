# import the Telegram API token from config.py
from config import TELEGRAM_API_TOKEN

# import the required Telegram modules
from telegram import Update
from telegram.ext import (
    CallbackQueryHandler,
    CommandHandler,
    MessageHandler,
    filters,
    ApplicationBuilder,
    ConversationHandler,
    ContextTypes
)
from telegram import ReplyKeyboardMarkup, KeyboardButton

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –º–æ–¥—É–ª–µ–π
from modules.config_functions import (
    generate_config, 
    generate_config_success,
    show_menu, 
    handle_menu_buttons,
    product_callback
)
from modules.info_functions import (
    start, help_message, about, status, limitations,
    privacy, tutorial, terms, support, whatsnew
)
from modules.download_links_functions import getapp, handle_os_selection, get_download_link
from modules.utils import cancel, send_typing_action
from modules.payment_handlers import select_product, check_payment

# enable logging
import logging

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è ConversationHandler
START, END = range(2)
APP_LETTERS = ["A", "B", "C", "D"]
OS_LETTERS = ["A", "B", "C", "D", "E"]


@send_typing_action
async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle unknown commands"""
    await update.message.reply_text("Sorry, I didn't understand that command.")


async def post_init(application):
    """–§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("Bot is starting...")
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∑–¥–µ—Å—å


async def post_stop(application):
    """–§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    logger.info("Bot is stopping...")
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å cleanup –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–¥–µ—Å—å


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Exception while handling an update: {context.error}", exc_info=context.error)
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ
        if update and update.effective_chat:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    except Exception as e:
        logger.error(f"Error in error handler: {e}")


def setup_handlers(application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞"""
    
    # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    command_handlers = [
        ("start", start),
        ("help", help_message),
        ("about", about),
        ("status", status),
        ("limitations", limitations),
        ("privacy", privacy),
        ("tutorial", tutorial),
        ("terms", terms),
        ("support", support),
        ("whatsnew", whatsnew),
        ("generate_config", generate_config),
        ("generate_config_success", generate_config_success),
        ("menu", show_menu),
        ("cancel", cancel),
    ]
    
    for command, handler in command_handlers:
        application.add_handler(CommandHandler(command, handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Æ–∫–∞—Å—Å—ã
    application.add_handler(
        CallbackQueryHandler(select_product, pattern="^(product_a|product_b|product_c|product_d)$")
    )
    application.add_handler(
        CallbackQueryHandler(check_payment, pattern="^check_")
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞
    application.add_handler(
        CallbackQueryHandler(product_callback, pattern="^(product_a|product_b|product_c|product_d)$")
    )
    
    # ConversationHandler –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("getapp", getapp)],
        states={
            START: [
                CallbackQueryHandler(handle_os_selection, pattern=f"^{letter}$")
                for letter in APP_LETTERS
            ],
            END: [
                CallbackQueryHandler(get_download_link, pattern=f"^{letter}$")
                for letter in OS_LETTERS
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True,
        per_message=False,
    )
    application.add_handler(conv_handler)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    application.add_handler(MessageHandler(
        filters.Text([
            "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "‚ùì –ü–æ–º–æ—â—å", "üõí –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø", 
            "üì• –°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "üîí –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å", 
            "‚öñÔ∏è –£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", "‚ÑπÔ∏è –û —Å–µ—Ä–≤–∏—Å–µ"
        ]), 
        handle_menu_buttons
    ))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    application.add_handler(MessageHandler(filters.ALL, unknown))


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
        application = (
            ApplicationBuilder()
            .token(TELEGRAM_API_TOKEN)
            .read_timeout(30)
            .write_timeout(30)
            .connect_timeout(30)
            .pool_timeout(30)
            .post_init(post_init)
            .post_stop(post_stop)
            .build()
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        setup_handlers(application)
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("Starting bot polling...")
        application.run_polling(
            poll_interval=1.0,
            timeout=30,
            drop_pending_updates=True
        )
        
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Failed to start bot: {e}")
        raise


if __name__ == "__main__":
    main()
