import subprocess
import os
import json
import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from config import OVPN_FILE_PATH
from modules.utils import send_upload_document_action
from modules.language_functions import get_language

logger = logging.getLogger(__name__)


async def generate_config(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏"""
    try:
        buttons = [
            [InlineKeyboardButton(text="1 –ú–µ—Å—è—Ü - 300 —Ä—É–±–ª–µ–π", callback_data="product_a")],
            [InlineKeyboardButton(text="3 –ú–µ—Å—è—Ü–∞ - 900 —Ä—É–±–ª–µ–π", callback_data="product_b")],
            [InlineKeyboardButton(text="6 –ú–µ—Å—è—Ü–µ–≤ - 1500 —Ä—É–±–ª–µ–π", callback_data="product_c")],
            [InlineKeyboardButton(text="1 –ì–æ–¥ - 2500 —Ä—É–±–ª–µ–π", callback_data="product_d")],
        ]

        products = InlineKeyboardMarkup(buttons)
        chat_id = update.message.chat_id
        
        await context.bot.send_message(
            chat_id, 
            "üîí **–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ**\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.", 
            reply_markup=products, 
            parse_mode='Markdown'
        )
    
    except Exception as e:
        logger.error(f"Error in generate_config: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∞—Ä–∏—Ñ–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def generate_config_success(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞"""
    await update.message.reply_text("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")


async def show_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    try:
        menu_keyboard = [
            [KeyboardButton("‚ùì –ü–æ–º–æ—â—å"), KeyboardButton("‚ÑπÔ∏è –û —Å–µ—Ä–≤–∏—Å–µ")],
            [KeyboardButton("üõí –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø")],
            [KeyboardButton("üì• –°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"), KeyboardButton("üîí –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å")],
            [KeyboardButton("‚öñÔ∏è –£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"), KeyboardButton("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ]
        reply_markup = ReplyKeyboardMarkup(menu_keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "ü§ñ **DataGuard - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
            "üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"Error in show_menu: {e}")
        await show_fallback_menu(update)


async def show_fallback_menu(update: Update):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏"""
    fallback_text = (
        "ü§ñ **DataGuard - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/generate_config - –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø\n" 
        "/getapp - –°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
        "/help - –ü–æ–º–æ—â—å"
    )
    await update.message.reply_text(fallback_text)


async def handle_menu_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é"""
    try:
        text = update.message.text
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é: {text}")
        
        button_handlers = {
            "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é": show_menu,
            "‚ùì –ü–æ–º–æ—â—å": "help_message",
            "‚ÑπÔ∏è –û —Å–µ—Ä–≤–∏—Å–µ": "about", 
            "üõí –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø": generate_config,
            "üì• –°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ": "getapp",
            "üîí –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å": "privacy",
            "‚öñÔ∏è –£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è": "terms"
        }
        
        if text in button_handlers:
            handler = button_handlers[text]
            if isinstance(handler, str):
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ –∏–º–µ–Ω–∏
                await call_function_by_name(update, context, handler)
            else:
                await handler(update, context)
        else:
            await show_menu(update, context)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_menu_buttons: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


async def call_function_by_name(update: Update, context: ContextTypes.DEFAULT_TYPE, function_name: str):
    """–í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ –∏–º–µ–Ω–∏"""
    try:
        if function_name == "help_message":
            from modules.info_functions import help_message
            await help_message(update, context)
        elif function_name == "about":
            from modules.info_functions import about
            await about(update, context)
        elif function_name == "getapp":
            from modules.download_links_functions import getapp
            await getapp(update, context)
        elif function_name == "privacy":
            from modules.info_functions import privacy
            await privacy(update, context)
        elif function_name == "terms":
            from modules.info_functions import terms
            await terms(update, context)
    except Exception as e:
        logger.error(f"Error calling function {function_name}: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")


async def product_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle product selection and set duration"""
    query = update.callback_query
    await query.answer()
    
    try:
        language, language_file_path = await get_language(update, context)
        with open(language_file_path, "r", encoding='utf-8') as f:
            strings = json.load(f)

        # Map product selection to duration days
        product_durations = {
            "product_a": 30,
            "product_b": 90,
            "product_c": 180,
            "product_d": 365
        }
        
        product_names = {
            "product_a": "1 –º–µ—Å—è—Ü",
            "product_b": "3 –º–µ—Å—è—Ü–∞", 
            "product_c": "6 –º–µ—Å—è—Ü–µ–≤",
            "product_d": "1 –≥–æ–¥"
        }

        choice = query.data
        chat_id = query.message.chat_id

        if choice in product_durations:
            # Store selected plan and duration in user data
            context.user_data["duration_days"] = product_durations[choice]
            context.user_data["selected_plan"] = product_names[choice]
            
            # Proceed directly to OpenVPN config generation
            await generate_openvpn_config(update, context)
        else:
            await context.bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞.")
            
    except Exception as e:
        logger.error(f"Error in product_callback: {e}")
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞.")


@send_upload_document_action
async def generate_openvpn_config(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Generate OpenVPN configuration file"""
    try:
        query = update.callback_query
        chat_id = query.message.chat_id
        
        # Get user data
        duration_days = context.user_data.get("duration_days")
        selected_plan = context.user_data.get("selected_plan")
        
        if not duration_days or not selected_plan:
            await context.bot.send_message(chat_id, "‚ùå –î–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        await context.bot.send_message(chat_id, "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—à –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª DataGuard...")

        # Generate unique client name
        user_id = query.from_user.id
        client_name = f"user_{user_id}"
        
        # Generate OpenVPN configuration
        return_code = subprocess.run([
            "pivpn", "ovpn", "add", "nopass", "-n", client_name, "-d", str(duration_days)
        ]).returncode
        
        if return_code != 0:
            await context.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
            return

        # Send configuration file to user
        file_path = os.path.join(OVPN_FILE_PATH, f"{client_name}.ovpn")
        await send_configuration_file(context, chat_id, file_path, client_name, selected_plan)
        
        # Cleanup
        await cleanup_after_config_generation(context, chat_id, query.message.message_id, file_path)
        
    except Exception as e:
        logger.error(f"Error in generate_openvpn_config: {e}")
        await context.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.")


async def send_configuration_file(context, chat_id, file_path, client_name, selected_plan):
    """Send configuration file to user"""
    try:
        with open(file_path, "rb") as f:
            await context.bot.send_document(
                chat_id, 
                document=f, 
                filename=f"{client_name}.ovpn",
                caption=f"üîë **–í–∞—à –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª**\n\n–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {selected_plan}"
            )
        
        # Send confirmation message
        duration_message = f"‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ DataGuard –∞–∫—Ç–∏–≤–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ {selected_plan}."
        await context.bot.send_message(chat_id, duration_message)
        
    except FileNotFoundError:
        await context.bot.send_message(chat_id, "‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logger.error(f"Error sending config file: {e}")
        await context.bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")


async def cleanup_after_config_generation(context, chat_id, message_id, file_path):
    """Cleanup after config generation"""
    # Clean up user data
    context.user_data.pop("selected_plan", None)
    context.user_data.pop("duration_days", None)
    
    # Delete original product selection message
    try:
        await context.bot.delete_message(chat_id, message_id)
    except Exception as e:
        logger.error(f"Error deleting message: {e}")
    
    # Clean up configuration file
    try:
        if os.path.exists(file_path):
            os.remove(file_path)
    except Exception as e:
        logger.error(f"Error deleting config file: {e}")
